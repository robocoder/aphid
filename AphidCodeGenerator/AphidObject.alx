#'Std';
#'Aphid.Tmpl';
#'Aphid.Code';

ret 
{
    name: "Components.Aphid.Lexer.Aphid",
    modes:
    [ 
        {
            mode: "Aphid",
            tokens: 
            [
                { regex: ",", type: "Comma" },
                { regex: ":", type: "ColonOperator" },
                
                { regex: "\\(", type: "LeftParenthesis" },
                { regex: "\\)", type: "RightParenthesis" },
                { regex: "\\[", type: "LeftBracket" },
                { regex: "\\]", type: "RightBracket" },
                { regex: "{", type: "LeftBrace" },
                { regex: "}", type: "RightBrace" },

                { regex: "-", type: "MinusOperator" },
                { regex: "\\+", type: "AdditionOperator" },
                { regex: "\\*", type: "MultiplicationOperator" },
                { regex: "/", type: "DivisionOperator" },
                { regex: "%", type: "ModulusOperator" },
                { regex: "&", type: "BinaryAndOperator" },
                { regex: "\\|", type: "BinaryOrOperator" },
                { regex: "^", type: "XorOperator" },
                { regex: "~", type: "ComplementOperator" },
                { regex: "<<", type: "ShiftLeft" },
                { regex: ">>", type: "ShiftRight" },
                
                { regex: "!", type: "NotOperator" },
                { regex: "&&", type: "AndOperator" },
                { regex: "\\|\\|", type: "OrOperator" },

                { regex: "==", type: "EqualityOperator" },
                { regex: "!=", type: "NotEqualOperator" },
                { regex: "<>", type: "NotEqualOperator" },
                { regex: "<", type: "LessThanOperator" },
                { regex: ">", type: "GreaterThanOperator" },
                { regex: "<=", type: "LessThanOrEqualOperator" },
                { regex: ">=", type: "GreaterThanOrEqualOperator" },

                { regex: "$", type: "PatternMatchingOperator" },                

                { regex: "\\r|\\n|\\t|\\v|\\s", type: "WhiteSpace" },
                { code: idCode },
                { regex: "0", code: getNumber('return AphidTokenType.Number;') },
                { regex: "0x", code: zeroXCode },
                { code: getNumber() },
                getString('"'),
                getString("'"),
                { regex: "//", code: singleLineCommentCode },
                { regex: "/\\*", code: commentCode }
            ],
            keywords: 
            [
                "true",
                "false",
                "null",
            ],
            keywordDefault: getKeywordHelper('Identifier'),
            keywordTail: getKeywordHelper('{Keyword}')            
        }
    ],
    ignore: [ "WhiteSpace", "Comment" ]    
};

